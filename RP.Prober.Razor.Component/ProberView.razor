@using Microsoft.JSInterop
@using RP.Prober.DataTypes
@using global::Prober.Consumer.Service
@inject ProberCacheMonitoringService proberCacheMonitoringService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

<PageTitle>Prober</PageTitle>

<script>
    function removeModalBackdrop() {
        setTimeout(() => {
            document.querySelectorAll('.modal-backdrop').forEach(e => e.remove());
        }, 100);
    }
</script>

<button class="btn mb-2 @(hasNewLogs ? "btn-danger" : "btn-secondary")" @onclick="ToggleLogPopup">
    Show Console Logs
</button>

<script>
    window.selectedLogIds = window.selectedLogIds || new Set(); // Global storage
    window.lastSelectedId = window.lastSelectedId || null;

    //let selectedLogIds = new Set(); // Store globally selected log IDs
    //let lastSelectedId = null;

    function selectText(row, event) {
        const id = row.getAttribute('data-log-id');
        const allRows = Array.from(document.querySelectorAll('.log-line'));

        if (event.shiftKey && lastSelectedId) {
            const rows = allRows.map(r => ({
                id: r.getAttribute('data-log-id'),
                el: r
            }));

            const startIndex = rows.findIndex(r => r.id === lastSelectedId);
            const endIndex = rows.findIndex(r => r.id === id);
            const [start, end] = startIndex < endIndex ? [startIndex, endIndex] : [endIndex, startIndex];

            selectedLogIds.clear();
            for (let i = start; i <= end; i++) {
                rows[i].el.classList.add('highlighted');
                selectedLogIds.add(rows[i].id);
            }
        } else {
            if (selectedLogIds.has(id)) {
                selectedLogIds.delete(id);
                row.classList.remove('highlighted');
            } else {
                selectedLogIds.clear();
                allRows.forEach(r => r.classList.remove('highlighted'));
                row.classList.add('highlighted');
                selectedLogIds.add(id);
            }
        }

        lastSelectedId = id;
    }

    function resetHighlights() {
        const allRows = document.querySelectorAll('.log-line');
        allRows.forEach(row => {
            const id = row.getAttribute('data-log-id');
            if (selectedLogIds.has(id)) {
                row.classList.add('highlighted');
            } else {
                row.classList.remove('highlighted');
            }
        });
    }

    document.addEventListener('mousedown', function (e) {
        if (e.target.closest('.log-line')) {
            e.preventDefault();
        }
    });

    document.addEventListener('keydown', function (e) {
        if (e.ctrlKey && e.key === 'c') {
            const selectedRows = document.querySelectorAll('.log-line.highlighted code');
            if (selectedRows.length > 0) {
                const text = Array.from(selectedRows).map(el => el.textContent).join('\n');
                navigator.clipboard.writeText(text).catch(console.error);
                e.preventDefault();
            }
        }

        if (e.ctrlKey && e.key === 'a') {
            const allRows = document.querySelectorAll('.log-line');
            allRows.forEach(row => {
                const id = row.getAttribute('data-log-id');
                row.classList.add('highlighted');
                selectedLogIds.add(id);
            });
            e.preventDefault();
        }
    });
</script>

@if (logPopupVisible)
{
    <div class="modal d-block draggable-modal" tabindex="-1" @ref="draggableModalRef">
        <div class="modal-dialog" style="width: 70vw; max-width: none;">
            <div class="modal-content resizable-box">
                <div class="modal-header">
                    <h5 class="modal-title">Console Logs (Live)</h5>
                    <button type="button" class="btn-close" @onclick="ToggleLogPopup"></button>
                </div>
                <div class="modal-body" style="overflow-y: auto; flex-grow: 1;" data-log-container>
                    <div style="min-height: 400px;">
                        @if (!liveLogs.Any())
                        {
                            <em>No logs yet.</em>
                        }
                        else
                        {
                            <table class="table table-sm table-striped log-table" style="font-family: monospace;">
                                <thead>
                                    <tr>
                                        <th style="width: 60px;">#</th>
                                        <th>Log</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var line in liveLogs.Select((text, i) => new { text, i }))
                                    {
                                        <tr class="log-line" data-log-id="@line.text.Item1" onclick="selectText(this, event)">

                                            <td>@(@line.text.Item1)</td>  <!-- Global Line Count -->
                                            <td><code id="log-line-@line.i">@line.text.Item2</code></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline-primary me-2" @onclick="ClearLogs">Clear Logs</button>
                    <button class="btn btn-outline-primary me-2" @onclick="ToggleAutoScroll">
                        @(autoScrollEnabled ? "Pause Auto-Scroll" : "Resume Auto-Scroll")
                    </button>
                    <button class="btn btn-secondary" @onclick="ToggleLogPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .log-line td code {
        display: block;
        white-space: pre-wrap;
        overflow: hidden;
        max-height: 2.8em;
        line-height: 1.4em;
        text-overflow: ellipsis;
    }

    .log-line.highlighted td code {
        background-color: #f0f8ff !important;
        border-left: 4px solid #007bff;
        max-height: none;
        overflow: visible;
    }

    table {
        border-collapse: collapse;
        width: 100%;
    }

        table thead th {
            position: sticky;
            top: 0;
            background-color: white; /* ensures header is opaque */
            z-index: 2;
            box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.1);
            padding: 8px 12px;
        }

    .modal-content {
        display: flex;
        flex-direction: column;
        height: 80vh;
    }

    .modal-body[data-log-container] {
        flex-grow: 1;
        overflow: hidden;
        padding: 0;
    }

    .log-table-container {
        height: 100%;
        overflow-y: auto;
        position: relative;
    }

    table.log-table {
        border-collapse: collapse;
        width: 100%;
    }

        table.log-table thead th {
            position: sticky;
            top: 0;
            background-color: white;
            z-index: 10;
            box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.1);
            padding: 8px 12px;
        }
</style>

<h4>Favorites</h4>

<input class="form-control mb-1" @bind="newFavoriteName" placeholder="New favorite name..." />
<button class="btn btn-primary mb-2" @onclick="SaveFavorites" disabled="@string.IsNullOrWhiteSpace(newFavoriteName)">Save Favorite</button>

@if (favorites?.Any() == true)
{
    <button class="btn btn-link mb-2" @onclick="ToggleFavoritesExpanded">
        @(favoritesExpanded ? "Hide Favorites ▼" : "Show Favorites ▶")
    </button>

    @if (favoritesExpanded)
    {
        <ul class="list-group mb-3">
            @foreach (var fav in favorites)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>
                        @fav.Name (@fav.SavedAt.ToShortTimeString())
                        @if (fav.IsDefault)
                        {
                            <span class="badge bg-success ms-2">Default</span>
                        }
                    </span>
                    <div>
                        <button class="btn btn-sm btn-outline-success me-1" @onclick="() => LoadFavorite(fav)">Load</button>
                        <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => ToggleDefaultFavorite(fav)">
                            @(fav.IsDefault ? "Unset Default" : "Set as Default")
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFavorite(fav)">Remove</button>
                    </div>
                </li>
            }
        </ul>
    }
}

<input class="form-control mb-2" value="@pendingFilterText" @oninput="OnNameFilterChanged" placeholder="Filter by name..." />

<div class="mb-2">
    <input type="checkbox" class="form-check-input me-1" @bind="showOnlySelected" id="showSelectedToggle" />
    <label for="showSelectedToggle">Show only selected</label>
</div>

<style>
    .tabs {
        display: flex;
        border-bottom: 2px solid #ccc;
        margin-bottom: 1rem;
        cursor: pointer;
    }

    .tab {
        padding: 0.5rem 1rem;
        border: 1px solid #ccc;
        border-bottom: none;
        background-color: #f1f1f1;
        margin-right: 4px;
    }

        .tab.active {
            background-color: white;
            font-weight: bold;
            border-top: 2px solid #007bff;
            border-left: 1px solid #ccc;
            border-right: 1px solid #ccc;
        }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .my-custom-table th,
    .my-custom-table td {
        border: 1px solid #ccc;
        padding: 0.5rem 1rem;
        text-align: left !important;
        white-space: nowrap;
        vertical-align: middle;
    }

    .my-custom-table {
        border-collapse: collapse;
        width: 100%;
    }
</style>

<script>
    function showTab(index) {
        const tabs = document.querySelectorAll('.tab');
        const contents = document.querySelectorAll('.tab-content');

        tabs.forEach(tab => tab.classList.remove('active'));
        contents.forEach(content => content.classList.remove('active'));

        tabs[index].classList.add('active');
        contents[index].classList.add('active');
    }
</script>
<script>
    function scrollToLastLogLine() {
        const container = document.querySelector('[data-log-container]');
        const logs = container?.querySelectorAll('[id^="log-line-"]');
        if (logs?.length > 0) {
            const lastLog = logs[logs.length - 1];
            container.scrollTop = container.scrollHeight;
        }
    }
</script>

<script>
    function selectTextById(id) {
        const el = document.getElementById(id);
        if (!el) return;

        const range = document.createRange();
        range.selectNodeContents(el);

        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
    }
</script>



<script>
    // let dragData = null;
    window.dragData = window.dragData || null;

    document.addEventListener('mousedown', function (e) {
        if (e.target.closest('.modal-header')) {
            const modal = e.target.closest('.draggable-modal');
            dragData = {
                element: modal,
                offsetX: e.clientX - modal.offsetLeft,
                offsetY: e.clientY - modal.offsetTop
            };
        }
    });

    document.addEventListener('mousemove', function (e) {
        if (dragData) {
            const { element, offsetX, offsetY } = dragData;
            element.style.left = (e.clientX - offsetX) + 'px';
            element.style.top = (e.clientY - offsetY) + 'px';
        }
    });

    document.addEventListener('mouseup', function () {
        dragData = null;
    });
</script>

<style>

    .modal.d-block {
        position: fixed;
        top: 100px;
        left: 100px;
        width: auto;
        height: auto;
        background-color: transparent;
        pointer-events: none;
        z-index: 1050;
    }

    .modal-dialog {
        margin: 0;
        pointer-events: auto;
        position: static;
    }

    .draggable-modal {
        width: fit-content;
        height: fit-content;
        background: none;
        resize: none;
        overflow: visible;
        position: fixed;
        top: 100px;
        left: 100px;
        z-index: 1050;
    }

    .resizable-box {
        display: flex;
        flex-direction: column;
        resize: both;
        overflow: auto;
        min-width: 300px;
        min-height: 200px;
        max-width: 95vw;
        max-height: 90vh;
        background-color: white;
    }

</style>

<style>
    body.modal-open {
        overflow: hidden !important;
    }
</style>

<style>
    .custom-modal {
        position: fixed;
        top: 100px;
        left: 100px;
        z-index: 1050;
        resize: both;
        overflow: auto;
        max-width: 95%;
        max-height: 95%;
        min-width: 300px;
        min-height: 200px;
        background-color: white;
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }

    .modal-header, .modal-footer {
        cursor: move; /* Allow drag behavior */
    }

    .modal-backdrop,
    .modal-backdrop.show,
    .modal-backdrop.fade {
        display: none !important;
        opacity: 0 !important;
        pointer-events: none !important;
    }

</style>

@if (tablesInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Select</th>
                <th>AppName</th>
                <th>Name</th>
                <th>Guid</th>
                <th>Available</th>
                <th>Group Index</th> @* New column *@
            </tr>
        </thead>
        <tbody>
            @foreach (var tableInfo in tablesInfo.Where(t => (string.IsNullOrEmpty(nameFilter) || t.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase)) && (!showOnlySelected || t.Capture)))
            {
                <tr>
                    <td>
                        <input type="checkbox" checked="@tableInfo.Capture" @onchange="(e => OnTableInfoChanged(tableInfo, e))" />
                    </td>
                    <td>@tableInfo.ApplicationName</td>
                    <td>@tableInfo.Name</td>
                    <td>@tableInfo.Guid</td>
                    <td>@tableInfo.Available</td>
                    <td>
                        <select class="form-select" @bind="tableInfo.GroupIndex">
                            <option value="-1">Default</option>
                            @for (int i = 0; i < 10; i++)
                            {
                                <option value="@i">Group @i</option>
                            }
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary mb-2" @onclick="TogglePause">
        @(isPaused ? "Resume Refresh" : "Pause Refresh")
    </button>



    <div class="tabs" id="tab-buttons">
        @for (int i = 0; i < groupedTables.Count; i++)
        {
            var groupIndex = groupedTables.Keys.ElementAt(i);
            <div class="tab @(i == 0 ? "active" : "")" onclick="showTab(@i)">
                @(groupIndex == -1 ? "Default Group" : $"Group {groupIndex}")
            </div>
        }
    </div>

    @for (int i = 0; i < groupedTables.Count; i++)
    {
        var group = groupedTables.ElementAt(i);
        var groupIndex = group.Key;
        var tables = group.Value;

        <div class="tab-content @(i == 0 ? "active" : "")" id="tab-content-@i">

            @foreach (var table in tables)
            {
                <div class="table-container mb-4">
                    <p>@table.TableInfo.Name (<strong>Guid:</strong> @table.TableInfo.Guid)</p>

                    <table class="my-custom-table">
                        <thead>
                            <tr>
                                @foreach (var header in table.TableData.FirstOrDefault() ?? new List<string>())
                                {
                                    <th>@header</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in table.TableData.Skip(1))
                            {
                                <tr>
                                    @foreach (var cell in row)
                                    {
                                        <td>@cell</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    }
}

@code {
    int tabIndex = 0;
    private bool initialized = false;

    private List<ExtendedTableInfoViewModel> tablesInfo = new List<ExtendedTableInfoViewModel>();
    private List<Table> tablesData = new List<Table>();
    private Timer timer;

    private string nameFilter = string.Empty;
    private string pendingFilterText = string.Empty;
    private Timer? debounceTimer;

    private bool isPaused = false;
    private bool showOnlySelected = false;
    private bool favoritesExpanded = false;

    private Dictionary<int, List<Table>> groupedTables =>
        tablesData
            .GroupBy(t =>
            {
                var match = tablesInfo.FirstOrDefault(x => x.Guid == t.TableInfo.Guid);
                return match?.GroupIndex ?? -1;
            }).ToDictionary(g => g.Key, g => g.ToList());

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true;

            var res = await proberCacheMonitoringService.GetAllAppsTableInfoAsync();
            foreach (var re in res)
            {
                var appName = re.Item1;
                foreach (var r in re.Item2)
                {
                    var v = new ExtendedTableInfoViewModel() { ApplicationName = appName, Available = r.Available, Name = r.Name, Guid = r.Guid };
                    tablesInfo.Add(v);
                }
            }

            await LoadFavorites();

            var defaultFavorite = favorites.FirstOrDefault(f => f.IsDefault);
            if (defaultFavorite != null)
            {
                LoadFavorite(defaultFavorite); // auto-load selection
            }

            timer = new Timer(new TimerCallback((o) => UpdateTablesData()), null, 1000, Timeout.Infinite);

            StartLogWatcher();
        }
    }

    private void OnTableInfoChanged(ExtendedTableInfoViewModel? tableInfo, ChangeEventArgs e)
    {
        tableInfo.Capture = (bool)e.Value;
    }

    private async void UpdateTablesData()
    {
        try
        {
            if (isPaused)
                return;

            var local_tablesData = new List<Table>();
            var dictionary = tablesInfo.GroupBy(x => x.ApplicationName).ToDictionary(g => g.Key, g => g.ToList());

            var tasks = new List<Task<List<Table>>>(); 

            foreach (var dict in dictionary)
            {
                if (dict.Value.Count > 0 && dict.Value.Any(x => x.Capture))
                {                    
                    tasks.Add(proberCacheMonitoringService.GetAppTableDataAsync(dict.Key, dict.Value.Where(x => x.Capture).Select(x => x.Guid).ToList()));
                }
            }

            var results = await Task.WhenAll(tasks);
            foreach (var result in results)
                local_tablesData.AddRange(result);

            try
            {
                local_tablesData = ProcessTables(local_tablesData, tablesInfo);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }

            tablesData = local_tablesData;

            await InvokeAsync(StateHasChanged);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            timer.Change(1000, Timeout.Infinite);
        }
    }

    private void TogglePause()
    {
        isPaused = !isPaused;
    }

    private void OnNameFilterChanged(ChangeEventArgs e)
    {
        pendingFilterText = e.Value?.ToString() ?? "";

        debounceTimer?.Dispose();
        debounceTimer = new Timer(ApplyFilter, null, 1000, Timeout.Infinite);
    }

    private void ApplyFilter(object? state)
    {
        nameFilter = pendingFilterText;        
        InvokeAsync(StateHasChanged);
    }

    private List<FavoriteMeasurement> favorites = new();
    private string newFavoriteName = "";

    private async Task SaveFavorites()
    {
        var selected = tablesInfo.Where(x => x.Capture).ToList();

        if (!selected.Any()) return;

        var fav = new FavoriteMeasurement
            {
                Name = newFavoriteName,
                SavedAt = DateTime.Now,
                SelectedTables = selected.Select(t => new ExtendedTableInfoViewModel
                {
                    ApplicationName = t.ApplicationName,
                    Name = t.Name,
                    Guid = t.Guid,
                    GroupIndex = t.GroupIndex,
                }).ToList()
            };

        favorites.Insert(0, fav);

        if (favorites.Count > 10)
            favorites = favorites.Take(10).ToList();

        await localStorage.SetItemAsync("favorites", favorites);

        newFavoriteName = "";
    }

    private async Task LoadFavorites()
    {
        favorites = await localStorage.GetItemAsync<List<FavoriteMeasurement>>("favorites") ?? new();
    }

    private void LoadFavorite(FavoriteMeasurement fav)
    {
        foreach (var table in tablesInfo)
        {
            var match = fav.SelectedTables.FirstOrDefault(x =>
                x.ApplicationName == table.ApplicationName &&
                x.Name == table.Name);

            if (match != null)
            {
                table.Capture = true;
                table.GroupIndex = match.GroupIndex;
            }
            else
            {
                table.Capture = false;
                table.GroupIndex = -1;
            }
        }
    }

    private async Task ToggleDefaultFavorite(FavoriteMeasurement fav)
    {
        bool wasDefault = fav.IsDefault;

        foreach (var f in favorites)
            f.IsDefault = false;

        if (!wasDefault)
            fav.IsDefault = true;

        await localStorage.SetItemAsync("favorites", favorites);
    }

    private void ToggleFavoritesExpanded()
    {
        favoritesExpanded = !favoritesExpanded;
    }

    private async Task RemoveFavorite(FavoriteMeasurement fav)
    {
        favorites.Remove(fav);
        await localStorage.SetItemAsync("favorites", favorites);
    }

    public class FavoriteMeasurement
    {
        public string Name { get; set; }
        public DateTime SavedAt { get; set; }
        public List<ExtendedTableInfoViewModel> SelectedTables { get; set; } = new();
        public bool IsDefault { get; set; } = false;
    }

    public class ExtendedTableInfoViewModel
    {
        public string ApplicationName { get; set; }
        public bool Available { get; set; }
        public string Name { get; set; }
        public Guid Guid { get; set; }
        public bool Capture { get; set; }
        public int GroupIndex { get; set; } = -1;
    }


    private async Task ScrollToBottom()
    {
        if (autoScrollEnabled)
            await JS.InvokeVoidAsync("scrollToLastLogLine");
    }

    private ElementReference logContainerRef;

    private bool logPopupVisible = false;
    private List<Tuple<long, string>> liveLogs = new();

    private long lastSeenLogSequence = 0;
    private long currentLogSequence = 0;
    private bool hasNewLogs => currentLogSequence > lastSeenLogSequence;
    private Timer? logCheckTimer;

    private void StartLogWatcher()
    {
        logCheckTimer = new Timer(_ =>
        {
            var seq = proberCacheMonitoringService.CurrentLogSequence;
            if (seq != currentLogSequence)
            {
                currentLogSequence = seq;
                InvokeAsync(StateHasChanged);
            }
        }, null, 0, 1000);
    }

    private void ClearLogs()
    {
        lock (liveLogs)
            liveLogs.Clear();
    }

    private async Task ToggleLogPopup()
    {
        logPopupVisible = !logPopupVisible;

        if (logPopupVisible)
        {
            await FetchAndAppendLogsPeriodically();
        }
    }

    private async Task FetchAndAppendLogsPeriodically()
    {
        while (logPopupVisible)
        {
            var logs = proberCacheMonitoringService.GetLogHistoryAndClear();
            if (logs.Any())
            {
                lock (liveLogs)
                    liveLogs.AddRange(logs);

                StateHasChanged();
                await ScrollToBottom();
                lastSeenLogSequence = proberCacheMonitoringService.CurrentLogSequence;
            }

            await Task.Delay(1000); 
        }
    }

    private bool autoScrollEnabled = true;

    private void ToggleAutoScroll()
    {
        autoScrollEnabled = !autoScrollEnabled;
    }

    private async Task SelectLogLine(int index)
    {
        await JS.InvokeVoidAsync("selectTextById", $"log-line-{index}");
    }

    private ElementReference draggableModalRef;

    private List<Table> ProcessTables(List<Table> inputTables, List<ExtendedTableInfoViewModel> tablesInfo)
    {
        var guidToAppName = tablesInfo.ToDictionary(x => x.Guid, x => x.ApplicationName);

        // Group by the last part of TableInfo.Name
        var grouped = inputTables
            .GroupBy(t => t.TableInfo.Name.Split('/').Last())
            .ToList();

        var processedTables = new List<Table>();
        var processedGuids = new HashSet<Guid>();

        foreach (var group in grouped)
        {
            var tables = group.ToList();

            // Filter out already processed tables
            var unprocessed = tables.Where(t => !processedGuids.Contains(t.TableInfo.Guid)).ToList();
            if (unprocessed.Count < 2)
            {
                if (unprocessed.Count == 0)
                    continue;

                // Only one table — not enough to merge
                processedTables.AddRange(unprocessed);                
                processedGuids.Add(unprocessed.First().TableInfo.Guid);
                continue;
            }

            // Ensure all tables have 2 rows
            if (unprocessed.Any(t => t.TableData.Count != 2))
            {
                if (unprocessed.Count == 0)
                    continue;

                processedTables.AddRange(unprocessed);
                foreach (var unp in unprocessed)
                    processedGuids.Add(unp.TableInfo.Guid);

                continue;
            }

            // Ensure headers (first row) contain same set of values (unordered match)
            var headerSet = new HashSet<string>(unprocessed[0].TableData[0]);
            if (unprocessed.Any(t => !new HashSet<string>(t.TableData[0]).SetEquals(headerSet)))
            {
                processedTables.AddRange(unprocessed);
                continue;
            }

            var sortedHeader = headerSet.OrderBy(h => h).ToList(); // Canonical header

            // Align values according to the sorted header
            var alignedSecondRows = new List<List<string>>();
            foreach (var table in unprocessed)
            {
                var originalHeader = table.TableData[0];
                var originalValues = table.TableData[1];

                var headerToValue = new Dictionary<string, string>();
                for (int i = 0; i < originalHeader.Count; i++)
                    headerToValue[originalHeader[i]] = originalValues[i];

                var alignedRow = sortedHeader.Select(h => headerToValue[h]).ToList();
                alignedSecondRows.Add(alignedRow);
            }

            // Transpose the values
            var transposed = Transpose(alignedSecondRows);

            // Create final merged data

            var finalData = new List<List<string>>();

            var appNames = unprocessed.Select(t => guidToAppName[t.TableInfo.Guid]).ToList();
            bool hasDuplicates = appNames.Count != appNames.Distinct().Count();

            if (!hasDuplicates)
            {
                var headerRow = new List<string> { "Keys" };
                headerRow.AddRange(unprocessed.Select(t => guidToAppName[t.TableInfo.Guid]));

                finalData.Add(headerRow);
            }
            else
            {
                var headerRow = new List<string> { "Keys" };
                headerRow.AddRange(unprocessed.Select(t =>
                {
                    var appName = guidToAppName[t.TableInfo.Guid];
                    var parts = t.TableInfo.Name.Split('/');
                    string prefix = parts.Length > 1 ? parts[^2] : "";
                    return string.IsNullOrEmpty(prefix) ? appName : $"{appName}_{prefix}";
                }));

                finalData.Add(headerRow);
            }

            for (int i = 0; i < sortedHeader.Count; i++)
            {
                var row = new List<string> { sortedHeader[i] };
                row.AddRange(transposed[i]);
                finalData.Add(row);
            }

            // Add the merged table
            processedTables.Add(new Table
                {
                    TableInfo = new TableInfo
                    {
                        Name = $"Merged/{group.Key}",
                        Guid = Guid.Empty // ← Set Guid.Empty as requested
                    },
                    TableData = finalData
                });

            // Mark all involved tables as processed
            foreach (var t in unprocessed)
                processedGuids.Add(t.TableInfo.Guid);
        }

        // Add any remaining unprocessed tables
        foreach (var table in inputTables)
        {
            if (!processedGuids.Contains(table.TableInfo.Guid))
                processedTables.Add(table);
        }

        return processedTables;
    }

    private List<List<string>> Transpose(List<List<string>> matrix)
    {
        int rowCount = matrix.Count;
        int colCount = matrix[0].Count;
        var transposed = new List<List<string>>();

        for (int i = 0; i < colCount; i++)
        {
            var row = new List<string>();
            for (int j = 0; j < rowCount; j++)
            {
                row.Add(matrix[j][i]);
            }
            transposed.Add(row);
        }

        return transposed;
    }

}
